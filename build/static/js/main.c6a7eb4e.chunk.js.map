{"version":3,"sources":["components/Search.js","components/GifList.js","App.js","serviceWorker.js","index.js"],"names":["ArticleList","_this$props","this","props","handlePress","urlRequestText","handleClick","react_default","a","createElement","type","className","onKeyPress","onClick","Component","GifList","gifsElements","setData","length","console","log","data","map","gif","index","key","id","renderElement","searchRequest","App","state","getRequestBody","_this","getStart","e","setState","document","querySelector","value","preventDefault","fetch","then","response","status","Promise","reject","Error","statusText","resolve","json","push","catch","error","Search_ArticleList","GifList_GifList","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"yNAEqBA,0LACX,IAAAC,EAC2CC,KAAKC,MAAjCC,GADfH,EACDI,eADCJ,EACeG,aAAaE,EAD5BL,EAC4BK,YACpC,OACCC,EAAAC,EAAAC,cAAA,WACCF,EAAAC,EAAAC,cAAA,YACCF,EAAAC,EAAAC,cAAA,SACCC,KAAK,OACLC,UAAU,QACVC,WAAYR,IACbG,EAAAC,EAAAC,cAAA,UAAQI,QAASP,GAAjB,gBAVoCQ,cCApBC,mLAGnB,IAAIC,EACAd,KAAKC,MAAMc,QAAQC,OAAS,IAC/BC,QAAQC,IAAI,oDACZJ,EAAed,KAAKC,MAAMc,QAAQ,GAAGI,KAAKC,IAAI,SAACC,EAAKC,GAAN,OAC7CjB,EAAAC,EAAAC,cAAA,MAAIgB,IAAOF,EAAIG,IACdnB,EAAAC,EAAAC,cAAA,SAAIc,EAAIG,QAKX,IACIC,EAAgBzB,KAAKC,MAAMc,QAAQC,OAAS,EAAIF,EADlC,GAGlB,OADAG,QAAQC,IAAI,SAAUlB,KAAKC,MAAMc,QAAQC,QAExCX,EAAAC,EAAAC,cAAA,UACEkB,EACDpB,EAAAC,EAAAC,cAAA,0BAnBiCK,aCGjCc,EAAc,GACZX,EAAU,GAsEDY,6MApEbC,MAAQ,CACNzB,eAAgB,MAGlB0B,eAAe,SAACD,GAChBF,EAAc,yCAAyC,CAACE,SAAO,qDAC/DX,QAAQC,IAAI,UAAWQ,GACvBI,EAAKC,cAqBL7B,YAAa,SAAC8B,GACE,UAAVA,EAAET,KACJO,EAAKG,SAAS,CACZ9B,eAAgB+B,SAASC,cAAc,UAAUC,WAKvDhC,YAAa,SAAC4B,GACZA,EAAEK,iBACFP,EAAKG,SAAS,CACZ9B,eAAgB+B,SAASC,cAAc,UAAUC,WAMrDL,SAAU,WAURO,MAAMZ,GACHa,KAVY,SAASC,GACtB,OAAuB,MAAnBA,EAASC,OACJC,QAAQC,OAAO,IAAIC,MAAMJ,EAASK,aAClCH,QAAQI,QAAQN,KAQxBD,KANU,SAASC,GACpB,OAAOA,EAASO,SAMfR,KAAK,SAASpB,GACbJ,EAAQiC,KAAK7B,KAEd8B,MAAM,SAASC,GACdjC,QAAQC,IAAI,QAASgC,KAEzBjC,QAAQC,IAAI,OAAQH,wFArDpBE,QAAQC,IAAI,QAASlB,KAAK4B,MAAMzB,gBAChCH,KAAK6B,eAAe7B,KAAK4B,MAAMzB,iDAI/B,OACEE,EAAAC,EAAAC,cAAA,OAAKE,UAAU,OACbJ,EAAAC,EAAAC,cAAA,4BACAF,EAAAC,EAAAC,cAAC4C,EAAD,CACEhD,eAAgBH,KAAK4B,MAAMzB,eAC3BD,YAAeF,KAAKE,YACpBE,YAAeJ,KAAKI,cACpBC,EAAAC,EAAAC,cAAC6C,EAAD,CAASrC,QAAWA,YAxBZH,aCKEyC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOtD,EAAAC,EAAAC,cAACqD,EAAD,MAAS1B,SAAS2B,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMzB,KAAK,SAAA0B,GACjCA,EAAaC","file":"static/js/main.c6a7eb4e.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\n\r\nexport default class ArticleList extends Component {\r\n\trender() {\r\n\t\tconst {urlRequestText, handlePress, handleClick} = this.props\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t<form>\r\n\t\t\t\t\t<input \r\n\t\t\t\t\t\ttype=\"text\" \r\n\t\t\t\t\t\tclassName=\"input\"\r\n\t\t\t\t\t\tonKeyPress={handlePress}/>\r\n\t\t\t\t\t<button onClick={handleClick}>Go!</button>\r\n\t\t\t\t</form>\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n\t\r\n}\r\n","import React, {Component} from 'react';\r\n\r\nexport default class GifList extends Component {\r\n\t\r\n\trender() {\r\n\t\tlet gifsElements;\r\n\t\tif (this.props.setData.length > 0) {\r\n\t\t\tconsole.log('проходит')\r\n\t\t\tgifsElements = this.props.setData[0].data.map((gif, index)=>\r\n\t\t\t\t<li key = {gif.id}> \r\n\t\t\t\t\t<p>{gif.id}</p>\r\n\t\t\t\t</li>\r\n\t\t\t)\r\n\t\t}\r\n\t\t\r\n\t\tconst emptyWord = '';\r\n\t\tlet renderElement = this.props.setData.length > 0 ? gifsElements : emptyWord;\r\n\t\tconsole.log('length', this.props.setData.length)\r\n\t\treturn (\r\n\t\t\t<ul>\r\n\t\t\t\t{renderElement}\r\n\t\t\t\t<p>ddddd</p>\r\n\t\t\t</ul>\r\n\t\t)\r\n\t}\r\n\r\n\t\r\n}\r\n","import React, {Component} from 'react';\nimport './App.css';\nimport Search from './components/Search';\nimport GifList from './components/GifList';\n\nlet searchRequest='';\nconst setData = [];\nclass App extends Component{\n  state = {\n    urlRequestText: '',\n  }\n  \n  getRequestBody=(state)=>{\n  searchRequest='http://api.giphy.com/v1/gifs/search?q='+{state}+'&api_key=0Hq9k7VDnzYAqDpFZYbLBtblsp20gugA&limit=25'\n  console.log('request', searchRequest)\n  this.getStart()\n  }\n  \n  componentDidUpdate() {\n    console.log('state', this.state.urlRequestText)\n    this.getRequestBody(this.state.urlRequestText)\n  }/*показывает стэйт после обновления*/\n  \n  render() {\n    return (\n      <div className=\"App\">\n        <h1>Get your Gifs!</h1>\n        <Search \n          urlRequestText={this.state.urlRequestText}\n          handlePress = {this.handlePress}\n          handleClick = {this.handleClick} />\n          <GifList setData = {setData}/>\n      </div>\n    )\n  }\n\n  handlePress =(e)=>{\n    if (e.key === 'Enter') {\n      this.setState({\n        urlRequestText: document.querySelector('.input').value\n      })\n    }\n  }\n\n  handleClick =(e)=>{\n    e.preventDefault()\n    this.setState({\n      urlRequestText: document.querySelector('.input').value\n    })\n  }\n\n  \n\n  getStart =()=>{\n    const status = function(response) {\n      if (response.status !==200) {\n        return Promise.reject(new Error(response.statusText))\n      } return Promise.resolve(response)\n    };\n    const json = function(response) {\n      return response.json()\n    };\n    \n    fetch(searchRequest)\n      .then(status) // отлавливаем ошибку 404 и подобные связанные с сервером\n      .then(json) // превращаем body из ответа сервера в json\n      .then(function(data) {\n        setData.push(data);\n      }) // записываем его в массив\n      .catch(function(error) {\n        console.log('error', error)\n      }) // ошибки связанные с сетью наример связанные с таймаутом\n    console.log('data', setData)\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}